{"version":3,"sources":["genre.module.css","Artist.js","Genre.js","action/index.js","App.js","main.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","Artist","id","useParams","artists","useSelector","state","console","log","className","style","all_Artists","map","artist","genre","key","image","src","picture","alt","name","Genre","title","dispatch","useDispatch","history","useHistory","useState","modalStatus","setModalStatus","api","axios","create","baseURL","getArtists","get","then","res","type","value","data","catch","err","Button","variant","color","onClick","to","Modal","modal","open","onClose","goBack","aria-labelledby","aria-describedby","App","checkAUth","a","window","getGenres","genres","setGenres","useEffect","picture_big","Main","exact","path","component","Boolean","location","hostname","match","initialState","rootReducer","action","Object","assign","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b1090bd7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"genre\":\"genre_genre__3XUkT\",\"image\":\"genre_image__1AxX7\",\"modal\":\"genre_modal__1b5Ku\",\"all_Artists\":\"genre_all_Artists__RStQN\"};","import React  from 'react';\nimport style from './genre.module.css'\nimport { useSelector } from 'react-redux';\nimport {useParams} from 'react-router'\n\nconst Artist = () =>{\n    const {id} = useParams(); \n    const artists = useSelector( state => state.artists );\n   console.log(id);\n    return(\n        <div className={style.all_Artists}>\n            {\n        artists.map(artist=>\n          <div className={style.genre} key={artist.id}>\n            <img className={style.image} src={artist.picture} alt=\"\"></img>\n            <p>{artist.name}</p>\n          </div>\n        )}\n        </div>\n    )\n}\nexport default Artist;\n","import React, {useState}  from 'react';\nimport style from './genre.module.css'\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\nimport axios from 'axios'\nimport Artist from './Artist'\nimport {setArtists} from \"./action\";\nimport {useHistory} from \"react-router-dom\";\nimport {useDispatch} from 'react-redux';\nimport {BrowserRouter as Router, Link} from 'react-router-dom'\n\nconst Genre = ({id,title,src}) =>{\n     const dispatch = useDispatch(); \n     const history = useHistory();\n     const [modalStatus, setModalStatus] =useState(false);\n     const openRelatedArtists = () =>{\n        getArtists();\n        setModalStatus(true); \n      }\n      const closeRelatedArtists = () =>{\n        setModalStatus(false);\n        history.goBack();\n      }\n      const api = axios.create({\n        baseURL: 'https://cors-anywhere.herokuapp.com/https://api.deezer.com'\n      });\n      const getArtists =  () =>{\n        api\n        .get(`/genre/${id}/artists`)\n        .then(res => dispatch(setArtists(res.data.data)))\n        .catch(err => console.log('err', err));\n      } \n    return(\n      <Router>\n        <div className={style.genre}>\n            <img className={style.image} src={src} alt=\"\"></img>\n            <h3>{title}</h3>\n            <Button variant=\"contained\" color=\"secondary\" onClick={openRelatedArtists}><Link to={`/${id}`}>show artists</Link></Button>\n            <Modal\n            className={style.modal}\n            open={modalStatus}\n            onClose={closeRelatedArtists}\n            aria-labelledby=\"simple-modal-title\"\n            aria-describedby=\"simple-modal-description\"\n          > \n          <Artist/>\n           </Modal>  \n        </div>\n        </Router>\n    );\n}\n\nexport default Genre;\n","export  const setArtists= artists => ({ \n        type: 'SET_ARTISTS',\n        value :artists\n})","import React, { useEffect, useState } from 'react';\nimport Genre from './Genre';\nimport axios from 'axios'\nimport './App.css';\n\nconst App = () =>{\n  const APP_ID = '403464';\n  const URI ='http://localhost:3007/'\n  const checkAUth = async () =>{\n  window.open(`https://connect.deezer.com/oauth/auth.php?app_id=${APP_ID}&redirect_uri=${URI}&perms=basic_access,email`,'popup','width=600,height=600');\n  getGenres();\n    }\n  const api = axios.create({\n    baseURL: 'https://cors-anywhere.herokuapp.com/https://api.deezer.com'\n  });\n\n const [genres, setGenres] = useState([]);\n  useEffect(()=>{checkAUth()\n  }, []);\n \n  const getGenres = async () =>{\n    api\n    .get('/genre')\n    .then(res => setGenres(res.data.data))\n    .catch(err => console.log('err', err));\n    \n }   \n  return (\n    <div className=\"App\">\n    <div className=\"genres\">\n    {genres.map(genre => ( \n    <Genre\n    key={genre.id}\n    id={genre.id}\n    title={genre.name}\n    src={genre.picture_big}\n    />\n     ) \n    )\n    }\n    </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport App from './App'\nimport Artist from './Artist'\nimport {BrowserRouter as Router,Route,Switch} from 'react-router-dom'\nconst Main = () =>{\n    return(\n        <Router>\n        <div>\n            <div>\n                <Switch>\n                    <Route exact path =\"/\" component={App}/>\n                    <Route exact path =\"/:id\" component={Artist}/>\n                </Switch>\n            </div>\n        </div>\n        </Router>\n    );\n}\nexport default Main; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//import { setArtists } from \"../action/index\";\nconst initialState = {\n    artists: [],\n\n  };\nconst rootReducer= (state = initialState, action)=>{\n    // eslint-disable-next-line default-case\n    switch(action.type){\n        case 'SET_ARTISTS' :\n        return Object.assign({},state,{artists: action.value});\n        default:\n        return state;\n    }\n} \nexport default rootReducer; \n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './main';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers/rootReducer'\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst store = createStore(rootReducer);\nReactDOM.render(\n  <Provider store = {store}>\n    <Main />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}